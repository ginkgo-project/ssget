#!/usr/bin/env bash


OPT=""
VAL=""
get_opt_and_val() {
    IFS=":" read -ra TEMP <<< "${LINE}"
    OPT="${TEMP[0]}"
    VAL="${TEMP[1]}"
}


MIN=""
MAX=""
PLACEHOLDER=""
COMMANDS=""
get_min_and_max() {
    IFS="," read -ra TEMP <<< "${VAL}"
    MIN="${TEMP[0]/ /}"
    MAX="${TEMP[1]/ /}"
    if [ "${MIN}" != "" ]; then
        COMMANDS="${COMMANDS} && [ ${PLACEHOLDER} -ge ${MIN} ]"
    fi
    if [ "${MAX}" != "" ]; then
        COMMANDS="${COMMANDS} && [ ${PLACEHOLDER} -le ${MAX} ]"
    fi
}


get_min_and_max_float() {
    IFS="," read -ra TEMP <<< "${VAL}"
    MIN="${TEMP[0]/ /}"
    MAX="${TEMP[1]/ /}"
    if [ "${MIN}" != "" ]; then
        COMMANDS="${COMMANDS} && [ \$(echo \"${PLACEHOLDER} >= ${MIN}\" | bc) -eq 1 ]"
    fi
    if [ "${MAX}" != "" ]; then
        COMMANDS="${COMMANDS} && [ \$(echo \"${PLACEHOLDER} <= ${MAX}\" | bc) -eq 1 ]"
    fi
}


process_rbtype_command() {
    case ${VAL} in
        Real)
            COMMANDS="${COMMANDS} && [[ @real == \"true\" ]] && [[ @binary == \"false\" ]]"
            ;;
        Complex)
            COMMANDS="${COMMANDS} && [[ @real == \"false\" ]]"
            ;;
        Bool)
            COMMANDS="${COMMANDS} && [[ @binary == \"true\" ]]"
            ;;
        Any)
            ;;
        *) 
            echo "Not support ${VAL} in rbtype"
            ;;
    esac
}


process_structure_command() {
    case ${VAL} in
        Square)
            COMMANDS="${COMMANDS} && [[ @rows == @cols ]]"
            ;;
        Rectangle)
            COMMANDS="${COMMANDS} && [[ @rows != @cols ]]"
            ;;
        Symmetric)
            COMMANDS="${COMMANDS} && [[ @real == true ]] && [[ @rows == @cols ]] && [[ @nsym == 1 ]]"
            ;;
        Unsymmetric)
            COMMANDS="${COMMANDS} && [[ @rows == @cols ]] && [[ @nsym != 1 ]]"
            ;;
        Hermitian)
            COMMANDS="${COMMANDS} && [[ @real == false ]] && [[ @rows == @cols ]] && [[ @nsym == 1 ]]"
            ;;
        Any)
            ;;
        *)
            echo "Not support ${VAL} in structure"
            ;;
    esac
}


while IFS='' read -r LINE || [[ -n "$LINE" ]]; do
    if [[ ! "$LINE" =~ ^\/\/.*$ ]]; then
        get_opt_and_val
        case ${OPT} in
            Rows)
                PLACEHOLDER="@rows" get_min_and_max
                ;;
            Columns)
                PLACEHOLDER="@cols" get_min_and_max
                ;;
            Nonzeros)
                PLACEHOLDER="@nonzeros" get_min_and_max
                ;;
            PatternSymmetry)
                PLACEHOLDER="@psym" get_min_and_max_float
                ;;
            NumericalSymmetry)
                PLACEHOLDER="@nsym" get_min_and_max_float
                ;;
            MatrixName)
                COMMANDS="${COMMANDS} && [[ \"@name\" =~ \"${VAL}\" ]]"
                ;;
            GroupName)
                COMMANDS="${COMMANDS} && [[ \"@group\" =~ \"${VAL}\" ]]"
                ;;
            Kind)
                COMMANDS="${COMMANDS} && [[ \"@kind\" =~ \"${VAL}\" ]]"
                ;;
            Keyword)
                TEMP="[[ \$(echo \"@name\" | grep -i \"${VAL}\") != \"\" ]]"
                TEMP+=" || "
                TEMP+="[[ \$(echo \"@group\" | grep -i \"${VAL}\") != \"\" ]]"
                TEMP+=" || "
                TEMP+="[[ \$(echo \"@kind\" | grep -i \"${VAL}\") != \"\" ]]"
                COMMANDS="${COMMANDS} && (${TEMP})"
                ;;
            PositiveDefinite)
                COMMANDS="${COMMANDS} && [[ @posdef == ${VAL} ]]"
                ;;
            Rutherford-BoeingType) 
                process_rbtype_command
                ;;
            SpecialStructure)
                process_structure_command
                ;;
            *)
                echo "Ignore the unknown option $OPT"
                ;;
        esac
    fi
done < "$1"
echo ${COMMANDS:3}
